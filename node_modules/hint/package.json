{
  "name": "hint",
  "description": "Awesome tooltips at your fingertips",
  "version": "2.0.0",
  "homepage": "https://github.com/bevacqua/hint",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "ng@bevacqua.io",
    "url": "http://bevacqua.io"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/bevacqua/hint.git"
  },
  "main": "src/hint.js",
  "devDependencies": {
    "gulp": "^3.6.2",
    "gulp-bump": "^0.1.8",
    "gulp-clean": "^0.2.4",
    "gulp-git": "^0.4.2",
    "gulp-header": "^1.0.2",
    "gulp-minify-css": "^0.3.4",
    "gulp-rename": "^1.2.0",
    "gulp-size": "^0.3.1",
    "gulp-stylus": "^1.0.0"
  },
  "dependencies": {
    "insert-rule": "^2.1.0",
    "nib": "^1.0.3"
  },
  "readme": "# hint\n\n> Awesome pure CSS tooltips at your fingertips\n\n# Install\n\nUsing Bower\n\n```shell\nbower install -S hint\n```\n\nUsing `npm`\n\n```shell\nnpm install -S hint\n```\n\n# Usage\n\nJust give your elements a nice tooltip in HTML. When hovered, the hint will appear.\n\n```html\n<span data-hint='foobar'>Foo Bar</span>\n```\n\nYou'll get a nice little tooltip. Remember to include the CSS in your styles!\n\n![hint.png][1]\n\nBy default, the `:after` pseudo-selector is used. This means you can use the `:before` pseudo-selector for your own purposes. If you want the `data-hint` to use `:before`, then you must use the `hint-before` class on the element as well.\n\n```html\n<span data-hint='foobar' class='hint-before'>Foo Bar</span>\n```\n\nYou can also use the [`aria-label`][2] attribute.\n\n```html\n<span aria-label='foobar'>Foo Bar</span>\n```\n\nIf you want the `aria-label` hint to use `:before`, then you must use the `hint-before` class on the element as well.\n\n```html\n<span aria-label='foobar' class='hint-before'>Foo Bar</span>\n```\n\nHints have a `z-index` of `5000`.\n\n# JavaScript\n\nThe CSS will only get us so far, and we must add a tiny bit of JavaScript if we want a little functionality. This is not critical to `hint`, and is therefore considered an optional feature. The JavaScript code enables the following features.\n\n- Hints are docked to the visible viewport so that they aren't cut off when they're near the edge\n- If hints are even wider than the viewport itself, then they are rendered in multi-line, setting the max width to the viewport width\n- You can define a maximum width to avoid hard-to-read long hints in wide viewports\n- When the JavaScript snippet is used, hints transition into view a second after the target element is hovered\n\nTo include the JavaScript, just use the following snippet if you're using CommonJS, or refer to the `dist` directory for the compiled distributions.\n\n```js\nrequire('hint');\n```\n\nTo set the maximum hint width, do:\n\n```js\nrequire('hint').maximumWidth = 650;\n```\n\nYou can also set it to 'auto', which means the full viewport size will be used if the tooltip exceeds the viewport size in length. In practice, `'auto'` means `Infinity` will be used. The default `maximumWidth` value is `650` pixels wide.\n\n# License\n\nMIT\n\n  [1]: http://i.imgur.com/EFP5j4E.png\n  [2]: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bevacqua/hint/issues"
  },
  "_id": "hint@2.0.0",
  "dist": {
    "shasum": "4439be97521e93958bd090764e86aaa4ba577560"
  },
  "_from": "hint@",
  "_resolved": "https://registry.npmjs.org/hint/-/hint-2.0.0.tgz"
}
